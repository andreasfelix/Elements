# Patch generated by Pyment v0.3.3

--- a/classes.py
+++ b/classes.py
@@ -8,8 +8,12 @@
 class Object:
     """Abstract base for all element and cells.
 
-    :param str name: The name of the object.
-    :param str description: A brief description of the object.
+    Args:
+      str: name: The name of the object.
+      str: description: A brief description of the object.
+
+    Returns:
+
     """
 
     def __init__(self, name, description=''):
@@ -46,9 +50,13 @@
 class Element(Object):
     """Base class for all elements.
 
-    :param name: The name of the element.
-    :param length: The length of the element.
-    :param description: A brief description of the element.
+    Args:
+      name: The name of the element.
+      length: The length of the element.
+      description: A brief description of the element.
+
+    Returns:
+
     """
 
     def __init__(self, name, length, description=''):
@@ -66,25 +74,36 @@
 
     @length.setter
     def length(self, value):
+        """
+
+        Args:
+          value: 
+
+        Returns:
+
+        """
         self._length = value
         self.length_changed()
 
     def _on_length_changed(self):
+        """ """
         for cell in self.parent_cells:
             cell.length_changed()
             cell.element_changed(self)
 
     def _on_value_changed(self):
+        """ """
         for cell in self.parent_cells:
             cell.element_changed(self)
 
 
 class Drift(Element):
-    """"""
+    """ """
     pass
 
 
 class Bend(Element):
+    """ """
     def __init__(self, name, length, angle, e1=0, e2=0, description=''):
         super().__init__(name, length, description)
         self._angle = angle
@@ -98,6 +117,14 @@
 
     @angle.setter
     def angle(self, value):
+        """
+
+        Args:
+          value: 
+
+        Returns:
+
+        """
         self._angle = value
         self.value_changed()
 
@@ -108,6 +135,14 @@
 
     @e1.setter
     def e1(self, value):
+        """
+
+        Args:
+          value: 
+
+        Returns:
+
+        """
         self._e1 = value
         self.value_changed()
 
@@ -118,6 +153,14 @@
 
     @e2.setter
     def e2(self, value):
+        """
+
+        Args:
+          value: 
+
+        Returns:
+
+        """
         self._e2 = value
         self.value_changed()
 
@@ -128,10 +171,19 @@
 
     @radius.setter
     def radius(self, value):
+        """
+
+        Args:
+          value: 
+
+        Returns:
+
+        """
         self.angle = value
 
 
 class Quad(Element):
+    """ """
     def __init__(self, name, length, k1, description=''):
         super().__init__(name, length, description)
         self._k1 = k1
@@ -143,11 +195,20 @@
 
     @k1.setter
     def k1(self, value):
+        """
+
+        Args:
+          value: 
+
+        Returns:
+
+        """
         self._k1 = value
         self.value_changed()
 
 
 class Sext(Element):
+    """ """
     def __init__(self, name, length, k2, description=''):
         super().__init__(name, length, description)
         self._k2 = k2
@@ -159,6 +220,14 @@
 
     @k2.setter
     def k2(self, value):
+        """
+
+        Args:
+          value: 
+
+        Returns:
+
+        """
         self._k2 = value
         self.value_changed()
 
@@ -210,7 +279,15 @@
         return self._tree
 
     def add(self, new_objects, pos=None):
-        """Add objects to the cell."""
+        """Add objects to the cell.
+
+        Args:
+          new_objects: 
+          pos:  (Default value = None)
+
+        Returns:
+
+        """
         if pos:
             self._tree[pos:pos] = new_objects
         else:
@@ -222,7 +299,15 @@
         self.tree_changed()
 
     def remove(self, pos, num=1):
-        """Remove objects from the cell."""
+        """Remove objects from the cell.
+
+        Args:
+          pos: 
+          num:  (Default value = 1)
+
+        Returns:
+
+        """
         removed_objects = self.tree[pos:pos + num]
         self._tree[pos:pos + num] = []
         for obj in set(removed_objects):
@@ -264,7 +349,14 @@
         self._tree_properties_needs_update = False
 
     def _update_tree_properties(self, tree):
-        """A recursive helper function for update_tree_properties."""
+        """A recursive helper function for update_tree_properties.
+
+        Args:
+          tree: 
+
+        Returns:
+
+        """
         lattice = self._lattice
         elements = self._elements
         cells = self._cells
@@ -287,6 +379,7 @@
                     raise AmbiguousNameError(obj.name)
 
     def _on_tree_properties_changed(self):
+        """ """
         self._tree_properties_needs_update = True
         for cell in self.parent_cells:
             cell.tree_properties_changed()
@@ -304,11 +397,20 @@
         self._length_needs_update = False
 
     def _on_length_changed(self):
+        """ """
         self._length_needs_update = True
         for cell in self.parent_cells:
             cell.length_changed()
 
     def _on_element_changed(self, element):
+        """
+
+        Args:
+          element: 
+
+        Returns:
+
+        """
         for cell in self.parent_cells:
             cell.element_changed(element)
 
@@ -324,6 +426,14 @@
         del self.start
 
     def _print_tree(self, cell):
+        """
+
+        Args:
+          cell: 
+
+        Returns:
+
+        """
         length = len(cell.tree)
         for i, x in enumerate(cell.tree):
             is_last = i == length - 1
